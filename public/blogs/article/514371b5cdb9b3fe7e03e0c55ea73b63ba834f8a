
## 认识一下前端各种编码与转义符
### html实体
`&、&#、&#x` html的转义符，叫做**html实体**；
例如：
* `&nbsp;` 
* `&gt;`  
* `&#60 === $lt === &#x3c`（十进制60等于十六进制3c）；

> 相关文档：[https://www.w3school.com.cn/charsets/ref_html_symbols.asp](https://www.w3school.com.cn/charsets/ref_html_symbols.asp)

**html实体转换算法**

```js
const t = (str)=>{
  return str.replace(/&#(?:x([0-9a-z]{1,4})|([0-9]{1,4}));/gi, function (_, hex, numStr) {
      var num = parseInt(hex || numStr, hex ? 16 : 10);
      return String.fromCharCode(num);
    });
}

t('&#x25bc;') // => '▼'
```

### encode编码

`%42`  URI编码，使用 `decodeURI('%42')`可以得到 `B`

`encodeURI('中国')` => `%E4%B8%AD%E5%9B%BD` 

注意 `encodeURI` 使用限制：

1. 不会对ASCII字母和数字进行编码
2. 不会对如下ASCII标点符号进行编码：` - _ . ! ~ * ' ( )`
3. 不会对具有特殊含义的ASCII标点符号进编码：`;/?:@&=+$,#`

那么`%42`是怎么来的？，ASCII 中 B 的十六进制编码为 `0x42` ，换成 `%42`即可。上述`限制3`中具有特殊含义的ASCII标点，不适用此法。

> 'B'.charCodeAt().toString(16) // => 42 

### base64

`YmFzZTY0`  base64编码；由`A-Z、a-z、0-9、+、/ `共64个字符组成。最后会有0-2个`=`号补位

### unicode

`\u2051` unicode；unicode是万国码，规定了所有字符的码点。 utf-8等是unicode的编码规则

`\x42` JS十六进制的编码，可以使用decodeURI转义,中文没有\x这种编码
> \u之后跟4位十六进制数。取值范围：\u0000 到 \uffff
> \x之后跟2位十六进制数。取值范围：\x00 到 \xff； 
> **\x5f === \u005f**

```js
decodeURI('%42')  // B
decodeURI('\x42')  // B
decodeURI('%E6%88%91') // 我
d = '我'
d.charCodeAt() // 25105
d.charCodeAt().toString(16) // '6211'
'\u6211' === '我' // \x因为范围原因，没有中文
```

### 数字

`0b1010` js二进制

`0o1010` js八进制

`0x1010` JS十六进制

