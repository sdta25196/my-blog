## 通过新建img标签来上传数据

兼容性好，无需挂载到页面上

img的加载不会阻塞html的解析

通常埋点上报会使用gif图，合法的 GIF 只需要 43 个字节

```js
var img=new Image();
img.src="https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/img/MaskGroup.13dfc4f1.png";
```

## Navigator.sendBeacon上传数据

Navigator.sendBeacon是目前通用的埋点上报方案，Navigator.sendBeacon方法接受两个参数，第一个参数是目标服务器的 URL，第二个参数是所要发送的数据（可选），可以是任意类型（字符串、表单对象、二进制对象等等）。通过 HTTP POST 将少量数据 异步 传输到 Web 服务器。

相较于img标签，使用navigator.sendBeacon会更规范，数据传输上可传输资源类型会更多。

> sendBeacon是异步的，不会影响当前页到下一个页面的跳转速度，且不受同域限制。这个方法还是异步发出请求，但是请求与当前页面脱离关联，作为浏览器的任务，因此可以保证会把数据发出去，不拖延卸载流程。

## 常见埋点行为

**点击触发埋点**

绑定点击事件，当点击目标元素时，触发埋点上报。

```js
function clickButton(url, data) {
    navigator.sendBeacon(url, data)
}
```

**页面停留时间上报埋点**

路由文件中，初始化一个startTime，当页面离开时通过路由守卫计算停留时间。

```js
let url = ''// 上报地址
let startTime = Date.now()
let currentTime = ''
router.beforeEach((to, from, next) => { 
     if (to) {
         currentTime = Date.now()
         stayTime = parseInt(currentTime - startTime)
         navigator.sendBeacon(url, {time: stayTime})
         startTime = Date.now()
     }
 })
```
**错误监听埋点**

通过监听函数去接收错误信息。

* react还可以使用`Error Boundaries`

```js
  class ErrorBoundary extends React.Component {
    constructor(props) {
      super(props);
      this.state = { hasError: false };
    }

    static getDerivedStateFromError(error) {
      // Update state so the next render will show the fallback UI.
      return { hasError: true };
    }

    componentDidCatch(error, info) {
      // 在这里进行错误上报
      logErrorToMyService(error, info);
    }

    render() {
      if (this.state.hasError) {
        // 自定义组件出错时的UI界面
        return <h1>Something went wrong.</h1>;
      }

      return this.props.children; 
    }
  }

  //而后你可以像一个普通的组件一样使用：
  <ErrorBoundary>
    <MyWidget />
  </ErrorBoundary>
```

* vue错误捕获

```js
app.config.errorHandler = (err) => { 
    navigator.sendBeacon(url, {error: error.message, text: 'vue运行异常' })
}
```

* JS异常与静态资源加载异常

error 可以监听所有同步、异步的运行时错误，但无法监听语法、接口、资源加载错误。

```js
window.addEventListener('error', (error) => { 
    if (error.message) { 
        navigator.sendBeacon(url, {error: error.message, text: 'js执行异常' })
    } else { 
        navigator.sendBeacon(url, {error: error.filename, text: '资源加载异常' })
    } 
}, true)
```

unhandledrejection 可以监听到 Promise 中抛出的，未被 .catch 捕获的错误。

```js
window.addEventListener('unhandledrejection')
```

* 请求错误捕获

```js
axios.interceptors.response.use(
  (response) => {
    if (response.code == 200) {
      return Promise.resolve(response);
    } else {
      return Promise.reject(response);
    }
  },
  (error) => {
    // 返回错误逻辑
    navigator.sendBeacon(url, {error: error, text: '请求错误异常' })
  }
);
```

**内容可见埋点**

通过交叉观察器去监听当前元素是否出现在页面

```js
// 可见性发生变化后的回调 
function callback(data) { 
    navigator.sendBeacon(url, { target: data[0].target, text: '内容可见' }) 
} 
// 交叉观察器配置项 
let options = {}; 
// 生成交叉观察器 
const observer = new IntersectionObserver(callback); 
// 获取目标节点 
let target = document.getElementById("target"); 
// 监听目标元素 
observer.observe(target);
```