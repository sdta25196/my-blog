## 前端监控方案

下面两个API配合使用，收集大部分错误信息

  * `window.addEventListener('error')`
    * error 可以监听所有同步、异步的运行时错误，但无法监听语法、接口、资源加载错误。

  * `window.addEventListener('unhandledrejection')`
    * unhandledrejection 可以监听到 Promise 中抛出的，未被 .catch 捕获的错误。

## react内置监控方案

* react还可以使用`Error Boundaries`
  ```js
  class ErrorBoundary extends React.Component {
    constructor(props) {
      super(props);
      this.state = { hasError: false };
    }

    static getDerivedStateFromError(error) {
      // Update state so the next render will show the fallback UI.
      return { hasError: true };
    }

    componentDidCatch(error, info) {
      // 在这里进行错误上报
      logErrorToMyService(error, info);
    }

    render() {
      if (this.state.hasError) {
        // 自定义组件出错时的UI界面
        return <h1>Something went wrong.</h1>;
      }

      return this.props.children; 
    }
  }

  //而后你可以像一个普通的组件一样使用：
  <ErrorBoundary>
    <MyWidget />
  </ErrorBoundary>
  ```